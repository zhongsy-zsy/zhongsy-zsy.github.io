<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>工程认知</title>
      <link href="/2022/06/13/yu-yan/gong-cheng-ren-zhi/gong-cheng-ren-zhi/"/>
      <url>/2022/06/13/yu-yan/gong-cheng-ren-zhi/gong-cheng-ren-zhi/</url>
      
        <content type="html"><![CDATA[<h1><span id></span></h1><h2><span id="思维">思维</span></h2><ul><li><p>对于有关联的数据结构，最好组合在一起，形成类或者是结构体</p></li><li><p>在探索方案的时候，要做到一下几点</p></li></ul><ol><li>整理数据流程功能要走通</li><li>想好如何复用现有的代码，功能而不是自己重写</li><li>要学会提前设计好数据结构，不要没做好就弄，会浪费很多时间</li></ol><ul><li>遇到问题，先分段找到大致的范围， 之后先考虑可能的情况，然后依次排除可能性更高的情况</li></ul><h2><span id="代码">代码</span></h2><ul><li>在编写代码的初期，为了确保代码的准确性，可以适当的添加assert()，方便快速定位代码异常位置。之后再相应的删除代码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用教程</title>
      <link href="/2022/06/12/hexo-shi-yong-jiao-cheng/"/>
      <url>/2022/06/12/hexo-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1><span id="hexo使用教程">Hexo使用教程</span></h1><!-- ttoc --><h2><span id="创建与发布文章">创建与发布文章</span></h2><blockquote><p>hexo new 文章名</p><p>hexo deploy -g 部署</p></blockquote><h2><span id="删除文章">删除文章</span></h2><blockquote><p>直接在source&#x2F;_post文件目录下删除文章，再只想 hexo d -g</p></blockquote><h2><span id="theme更改">theme更改</span></h2><p>首先将自己喜欢的主题下载到theme目录下。</p><p>有两个设置，一个在hexo主目录下面，配置使用哪一个主题(theme字段)，theme目录下面有具体的主题文件，当中含有一个配置文件用于配置细节。</p><p><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/">主题推荐</a></p><p><a href="http://blinkfox.com/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-19">主题使用手册</a></p><h2><span id="安装依赖">安装依赖</span></h2><p>在 <code>hexo init</code>目录下只想 nmp install xxx –save进行安装</p><h2><span id="搭建">搭建</span></h2><ol><li>注册github账号</li><li>新建仓库，注意仓库的名称必须为 用户名.github.io</li><li>初始化仓库 hexo init 文件夹</li><li>hexo d -g 之后打开浏览器访问 用户名.git</li></ol><h3><span id="配置评论功能">配置评论功能</span></h3><p>使用valline配置评论功能。</p><ol><li>首先去valline官网注册一个账号。</li><li>应用中的设置中点击应用凭证，获取AppID AppKey</li><li>然后去_config.yaml上进行配置</li></ol><pre class=" language-c++"><code class="language-c++">valine:  enable: true # 设置为true，默认为false  appid:  # 将应用key的App ID设置在这里  appkey: # 将应用key的App Key设置在这里  notify: false# 邮箱通知 , https://github.com/xCss/Valine/wiki，默认为false  verify: false# 验证码 默认为false  placeholder: Just go go ^_^ # 初始化评论显示，根据自己修改，这里默认，  avatar: monsterid # 头像风格，默认为mm，可进入网址：https://valine.js.org/visitor.html查看头像设置，这里有许多头像风格，进行设置  guest_info: nick,mail,link # 自定义评论标题  pageSize: 10 # 分页大小，10页就自动分页  visitor: true # 是否允许游客评论 ，进入官网查看设置：https://valine.js.org/visitor.html</code></pre><p>最后效果如下：</p><img src="https://zhongsy.oss-cn-beijing.aliyuncs.com/img/image-20220610210620831.png" alt="image-20220610210620831" style="zoom:33%;"><p><a href="https://cloud.tencent.com/developer/article/1965154">更多配置</a></p><h2><span id="自定义域名">自定义域名</span></h2><p>可以花点钱去定义自己的域名，而不需要.github.io了</p><p>具体操作如下</p><p><a href="https://blog.csdn.net/Qxiaofei_/article/details/124607458?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165486692316780366521224%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=165486692316780366521224&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-124607458-null-null.142%5Ev13%5Econtrol,157%5Ev14%5Econtrol&utm_term=hexo%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90&spm=1018.2226.3001.4187">域名自定义操作</a></p><h2><span id="写文章">写文章</span></h2><h3><span id="配置图床">配置图床</span></h3><p>picgo + 阿里云 + typora</p><p><a href="https://zhuanlan.zhihu.com/p/104152479">配置教程</a></p><h2><span id="插件推荐">插件推荐</span></h2><p>Hexo提供了诸多插件来增强博客体验，地址<code>http://hexo.io/plugins/</code>。</p><ul><li>hexo-toc</li></ul><p>用于生成目录，只需要在生成目录的地方写入 <code>&lt;!-- ttoc --&gt;</code></p><p>安装 <code>npm install hexo-toc --save</code></p><p>在博客根目录下的 <code>_config.yml</code> 中如下配置：</p><pre><code>toc:  maxDepth: 3</code></pre><p><a href="https://yscoder.github.io/20150514/hexo-toc.html">参考</a></p><h2><span id="hexo文档归类">hexo文档归类</span></h2><p>_config.yaml下面有两个配置</p><p><code>permalink</code> 用于设置文章的永久链接格式<br><code>new_post_name</code> 新文章的文件名称</p><p>配置如下命令，即可让新建的文章默认按照年月去分类。<br>在<code>_config.yml</code>文件中修改下面的命令<br><code>new_post_name: :year/:month/:title.md</code></p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5yeXpleWFuZy50b3AvMjAyMDA3MjYwOTI3MjQucG5n?x-oss-process=image/format,png" alt="20200726092724" style="zoom:50%;"><p>通过该命令 <code>hexo new post -p /后端/test.md</code> 执行后，会在post文件夹下创建子文件夹 “后端”，并创建一篇test.md博文。</p><p><a href="https://hexo.io/zh-cn/">hexo官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++函数返回优化</title>
      <link href="/2022/06/12/yu-yan/c/c-han-shu-fan-hui-you-hua/"/>
      <url>/2022/06/12/yu-yan/c/c-han-shu-fan-hui-you-hua/</url>
      
        <content type="html"><![CDATA[<h1><span id="c函数返回优化">C++函数返回优化</span></h1><p>我们知道，函数运行结束后，函数内部的局部变量就会消失，当函数返回的对象的时候，会产生一个临时对象，这样会消耗很多的计算资源，写一段代码进行测试。</p><pre class=" language-c++"><code class="language-c++">#include <iostream>using namespace std;class MyBuff &#123; public:  MyBuff() &#123;    cout << "MyBuff()" << endl;  &#125;  MyBuff(const MyBuff& b) = delete;  MyBuff& operator=(const MyBuff& b) = delete;  ~MyBuff() &#123;    cout << "~MyBuff()" << endl;  &#125;  MyBuff(MyBuff&& b) noexcept &#123; cout << "move construct" << endl; &#125;  MyBuff& operator=(MyBuff&& b) noexcept &#123;    cout << "move assign " << endl;    return *this;  &#125;&#125;;class bbuffer &#123; public:  bbuffer() &#123;&#125;  void show() &#123; cout << "sh bbuffer" << endl; &#125;  ~bbuffer() &#123;&#125;&#125;;MyBuff GetBuff() &#123;  MyBuff res;  cout << &res << endl;  bbuffer b_;  b_.show();  return res;&#125;int main() &#123;  MyBuff b = GetBuff();  cout << &b << endl;&#125;</iostream></code></pre><p>执行结果如下：</p><pre><code>MyBuff()0x7ff7bb322258show bbuffer0x7ff7bb322258~MyBuff()</code></pre><p>是不是感觉和理解的不对，这时候好像并没有产生一个临时的对象，我们发现b和临时对象res的地址是一样的，并且res的析构是在整个程序结束的时候执行的，难道编译器进行了优化。</p><p>之后百度发现有一种优化叫做返回值优化机制，<a href="https://www.cnblogs.com/xkfz007/archive/2012/07/21/2602110.html">传送门</a>，编译时候加入参数 -fno-elide-constructors优化。</p><p>从新执行代码结果如下</p><pre><code>MyBuff()0x7ff7b2e2a200show bbuffermove construct~MyBuff()move construct~MyBuff()0x7ff7b2e2a258~MyBuff()</code></pre><p>这时候</p><p>MyBuff()是在GetBuff()函数内部进行构造。</p><p>返回的时候生成临时变量，(函数的返回值为右值)触发一次移动构造，之后析构res.</p><p>之后临时变量用来构造main中的c，之后析构</p><p>函数执行完成，c被析构。</p><p>为什么没有调用移动赋值构造，<a href="https://www.jianshu.com/p/fb2440750f70">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大小端详解</title>
      <link href="/2022/06/12/yu-yan/c/da-xiao-duan/"/>
      <url>/2022/06/12/yu-yan/c/da-xiao-duan/</url>
      
        <content type="html"><![CDATA[<h1><span id="大小端详解">大小端详解</span></h1><p> [toc]</p><h2><span id="大小端原理">大小端原理</span></h2><p>大小端出现的原因在于：在计算机中，&#x3D;&#x3D;数据都是按照字节去进行存储的(所以如果是单字节的问题就不涉及到大小端)&#x3D;&#x3D;，但是对于多字节(int,long等)就会涉及到数据的存储顺序的问题，这也就出现了两种常见的存储方式</p><ul><li>Big endian : 大端存储，大端存储是高字节在前面(低地址)，低字节在后面(高地址)</li><li>Little endiam ：小端存储，小端存储是高字节在后面(高地址)，低字节在前面(低地址)</li></ul><p>不同的cpu可能有不同的模型</p><p>优点</p><ul><li>大端模式，由于高位在低地址，所以很容易判断正负</li><li>小端模式，强制抓换数据的时候，不需要调整字节内容</li></ul><p>以0x1234为例进行说明。</p><table><thead><tr><th>地址</th><th>0x4000（低地址）</th><th>0x4001（高地址）</th></tr></thead><tbody><tr><td>大端存储</td><td>0x12</td><td>0x34</td></tr><tr><td>小端存储</td><td>0x34</td><td>0x12</td></tr></tbody></table><h2><span id="大小端验证">大小端验证</span></h2><h3><span id="c验证">C++验证</span></h3><p>C++判断大小端可以借用Union，union在某种程度上和struct是一种数据结构</p><p>相同点</p><ul><li>都可以包含不同的数据类型和变量</li></ul><p>不同点</p><ul><li>struct是所有数据&#x3D;&#x3D;共存&#x3D;&#x3D;，有容乃大，不管struct内的数据结构用不用，都会为其分配内存</li><li>union是各种变量互斥的存在。其实就是共用一块内存地址。union的大小取决与里面内存对齐后最大的那个。</li></ul><p><a href="https://blog.csdn.net/ahelloyou/article/details/118488687?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165475505716782395384248%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=165475505716782395384248&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-118488687-null-null.nonecase&utm_term=%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90&spm=1018.2226.3001.4450">内存对齐知识点</a></p><p>这时候就可以利用union去判断大小端。</p><pre class=" language-c++"><code class="language-c++">union U &#123;  char ch[4];  int var;&#125; test;这时候U的sizeof为4我们进行如下的赋值操作  test.ch[0] = 0x00u; // 低地址  test.ch[1] = 0x00u; // +    test.ch[2] = 0x00u; // +    test.ch[3] = 0x01u; // 高地址                                                            高位(32) -    -   低位(0)如果是大端模式，那么高位放到低地址为 0x00u 0x00u 0x00u 0x01u如果是小端模式，那么高位放在高地址为 0x01u 0x00u 0x00u 0x00u如果test.val == 1那么就是大端模式，反之就是小端。</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> c++基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 464. 我能赢吗</title>
      <link href="/2022/06/12/yu-yan/leetcode/dfs/464-wo-neng-ying-ma/"/>
      <url>/2022/06/12/yu-yan/leetcode/dfs/464-wo-neng-ying-ma/</url>
      
        <content type="html"><![CDATA[<h4><span id="464-我能赢吗"></span></h4><p>难度中等370收藏分享切换为英文接收动态反馈</p><p>在 “100 game” 这个游戏中，两名玩家轮流选择从 <code>1</code> 到 <code>10</code> 的任意整数，累计整数和，先使得累计整数和 <strong>达到或超过</strong> 100 的玩家，即为胜者。</p><p>如果我们将游戏规则改为 “玩家 <strong>不能</strong> 重复使用整数” 呢？</p><p>例如，两个玩家可以轮流从公共整数池中抽取从 1 到 15 的整数（不放回），直到累计整数和 &gt;&#x3D; 100。</p><p>给定两个整数 <code>maxChoosableInteger</code> （整数池中可选择的最大数）和 <code>desiredTotal</code>（累计和），若先出手的玩家是否能稳赢则返回 <code>true</code> ，否则返回 <code>false</code> 。假设两位玩家游戏时都表现 <strong>最佳</strong> 。</p><p><strong>示例 1：</strong></p><pre><code>输入：maxChoosableInteger = 10, desiredTotal = 11输出：false解释：无论第一个玩家选择哪个整数，他都会失败。第一个玩家可以选择从 1 到 10 的整数。如果第一个玩家选择 1，那么第二个玩家只能选择从 2 到 10 的整数。第二个玩家可以通过选择整数 10（那么累积和为 11 &gt;= desiredTotal），从而取得胜利.同样地，第一个玩家选择任意其他整数，第二个玩家都会赢。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入：maxChoosableInteger = 10, desiredTotal = 0输出：true</code></pre><p><strong>示例 3:</strong></p><pre><code>输入：maxChoosableInteger = 10, desiredTotal = 1输出：true</code></pre><h3><span id="思路">思路</span></h3><p>首先想到的是暴力解法，也就就将每一种情况都遍历一遍。其实动态规划，也是在记忆dfs的基础上进行的，也就是其中一个是正向遍历(自顶向下)，一个是递归逆向的(自底向上)。</p><p>那么怎么去记忆化。也就是找到变量并将其记录下来，下次再次遇到的时候就可以直接得到结果。</p><p>这里的变量是，</p><ul><li>我们取的数和剩余的数(这里用二进制去表示取的数，因为m&lt;&#x3D;20,也就是20位，这样就可以用statae代表，而visited[state]记录着这个状态下的结果)</li><li>sum</li></ul><p>依照这个思路写下代码如下；</p><pre class=" language-c++"><code class="language-c++">class Solution &#123;private:    // visited[i] == 0，说明没有计算过    // visited[i] == 1，说明计算过，结果为 true    // visited[i] == 2，说明计算过，结果为 false    int visited[1 << 21];public:    bool canIWin(int maxChoosableInteger, int desiredTotal) &#123;        // 判断当前做选择的玩家（先手），是否一定赢        // 开始时，state = 0，表示「公共整数集」中的所有数字都未被使用过         if (maxChoosableInteger >= desiredTotal)            return true;        if (maxChoosableInteger * (maxChoosableInteger + 1) < 2*desiredTotal)            return false;        return dfs(0, 0, maxChoosableInteger, desiredTotal);    &#125;        // 当前做选择的玩家是否一定赢    bool dfs(int state, int sum, int maxChoosableInteger, int desiredTotal) &#123;        if (visited[state] == 1) return true;        if (visited[state] == 2) return false;        // 遍历可选择的公共整数        for (int x = 1; x <= maxchoosableinteger; ++x) &#123; 如果 x 已经被使用过了，则不能选择 if ((1 << x) & state) continue; 如果选择了 以后，大于等于了 desiredtotal，当前玩家赢 (sum +>= desiredTotal) &#123;                visited[state] = 1;                return true;            &#125;            // 当前玩家选择了 x 以后，判断对方玩家一定输吗？            if (!dfs((1 << x) | state, sum + x, maxChoosableInteger, desiredTotal)) &#123;                visited[state] = 1;                return true;            &#125;        &#125;        visited[state] = 2;        return false;    &#125;    &#125;;</=></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语句提取数据存入excel</title>
      <link href="/2022/06/12/yu-yan/python/python-jiao-ben/yu-ju-ti-qu-shu-ju-cun-ru-excel/"/>
      <url>/2022/06/12/yu-yan/python/python-jiao-ben/yu-ju-ti-qu-shu-ju-cun-ru-excel/</url>
      
        <content type="html"><![CDATA[<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">from</span> re <span class="token keyword">import</span> X<span class="token keyword">import</span> xlwt<span class="token keyword">import</span> xlrd<span class="token keyword">def</span> <span class="token function">calculate_average</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(lst)</span>    sum <span class="token operator">=</span> <span class="token number">0</span>    acc <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> val <span class="token keyword">in</span> lst<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        sum <span class="token operator">+=</span> int<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        acc <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>acc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">return</span> sum<span class="token operator">/</span>acc<span class="token keyword">def</span> <span class="token function">find_num</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">:</span>    p_1 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>pattern<span class="token punctuation">)</span>    raw_1 <span class="token operator">=</span> p_1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>raw_1<span class="token punctuation">)</span>    p_2 <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[0-9]+"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> p_2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_file</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    book <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建Workbook，相当于创建Excel</span>    <span class="token comment" spellcheck="true"># 创建sheet，Sheet1为表的名字，cell_overwrite_ok为是否覆盖单元格</span>    sheet1 <span class="token operator">=</span> book<span class="token punctuation">.</span>add_sheet<span class="token punctuation">(</span>u<span class="token string">'Sheet1'</span><span class="token punctuation">,</span> cell_overwrite_ok<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet1<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    row <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sheet1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> val<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        row <span class="token operator">=</span> row<span class="token operator">+</span><span class="token number">1</span>    <span class="token comment" spellcheck="true"># write average</span>    sheet1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"average"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sheet1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>row<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> calculate_average<span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    book<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'/Users/bytedance/Documents/csv_1.0.xls'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Lock"</span><span class="token punctuation">,</span> <span class="token string">"eglmake"</span><span class="token punctuation">,</span> <span class="token string">"draw"</span><span class="token punctuation">,</span> <span class="token string">"buf"</span><span class="token punctuation">,</span> <span class="token string">"render"</span><span class="token punctuation">,</span> <span class="token string">"all"</span><span class="token punctuation">]</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'/Users/bytedance/Documents/csv_1.0.log'</span><span class="token punctuation">,</span> <span class="token string">'r+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>        val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># for i in range(len(key)):</span>        <span class="token comment" spellcheck="true"># val[i].append([])</span>        <span class="token comment" spellcheck="true"># val[i].pop()</span>        <span class="token keyword">for</span> text <span class="token keyword">in</span> fd<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># print(text)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                v <span class="token operator">=</span> find_num<span class="token punctuation">(</span>text<span class="token punctuation">,</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">": [0-9]+"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># print(v)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>        write_file<span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
          <category> 数据处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>post</title>
      <link href="/2022/06/10/yin-shi-pin-ji-chu/rtc/rtc-suan-fa-ji-chu/"/>
      <url>/2022/06/10/yin-shi-pin-ji-chu/rtc/rtc-suan-fa-ji-chu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/10/hello-world/"/>
      <url>/2022/06/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
